"use strict";

var EMAIL = "nikolay.hnatovskyi@gmail.com";
var commentsCount = 0;
var isEditModeEnabled = false;

function getCommentsList(count, offset) {
    var url = "http://frontend-test.pingbull.com/pages/" + EMAIL + "/comments";

    if (count !== undefined && offset !== undefined) {
        url += "?count=" + count + "&offset=" + offset;
    } else if (count !== undefined) {
        url += "?count=" + count;
    } else if (offset !== undefined) {
        url += "?offset=" + offset;
    }

    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.onload = function () {
        var result = JSON.parse(xhr.responseText);
        if (xhr.readyState == 4 && xhr.status == "200") {
            renderCommentList(result);
            console.log(result);
        } else {
            console.error(result);
        }
    };
    xhr.send(null);
}

getCommentsList();
// getCommentsList();
// getCommentsList(null, 3);
// getCommentsList(2);

function getSingleComment(id) {
    var url = "http://frontend-test.pingbull.com/pages/" + EMAIL + "/comments/";
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url + id, true);
    xhr.onload = function () {
        var result = JSON.parse(xhr.responseText);
        if (xhr.readyState == 4 && xhr.status == "200") {
            console.log(result);
        } else {
            console.error(result);
        }
    };
    xhr.send(null);
}
//getSingleComment(4141)

function newComment(content, parent) {
    var url = "http://frontend-test.pingbull.com/pages/" + EMAIL + "/comments";

    if (content !== undefined && parent !== undefined) {
        url += "?content=" + content + "&parent=" + parent;
    } else if (content !== undefined) {
        url += "?content=" + content;
    } else if (content === undefined) {
        console.log("Please, enter the message!");
    }

    var xhr = new XMLHttpRequest();
    xhr.open("POST", url, true);
    xhr.setRequestHeader('Content-type', 'application/json; charset=utf-8');
    xhr.onload = function () {
        var result = JSON.parse(xhr.responseText);
        if (xhr.readyState == 4 && xhr.status == "201") {
            console.log(result, url);
        } else {
            console.error(result);
        }
    };
    xhr.send(null);
}
//newComment("text ", 4141);

function editComment(id, content) {
    var url = "http://frontend-test.pingbull.com/pages/" + EMAIL + "/comments/" + id;

    if (content !== undefined) {
        url += "?content=" + content;
    } else {
        return;
    }

    var xhr = new XMLHttpRequest();
    xhr.open("PUT", url, true);
    xhr.setRequestHeader('Content-type', 'application/json; charset=utf-8');
    xhr.onload = function () {
        var result = JSON.parse(xhr.responseText);
        if (xhr.readyState == 4 && xhr.status == "200") {
            console.log(result);
        } else {
            console.error(result);
        }
    };
    xhr.send(null);
}
// editComment(4150, "12345");

function deleteComment(id) {
    var url = "http://frontend-test.pingbull.com/pages/" + EMAIL + "/comments/" + id;
    var xhr = new XMLHttpRequest();
    xhr.open("DELETE", url, true);
    xhr.send(null);
}

// deleteComment(4148);


/* Rendering */

function renderCommentList(result) {
    var html = "";
    var commentsArr = Array.from(result);
    var dataRegExp = /[0-9]{4}-(0[1-9]|1[012])-(0[1-9]|1[0-9]|2[0-9]|3[01])/;
    var timeRegExp = /([01]?[0-9]|2[0-3]):[0-5][0-9]/;

    commentsArr.forEach(function (comment) {
        commentsCount++;
        html += "\n        <div class=\"comment\">\n            <div class=\"avatar\">\n                <img src=\"" + comment.author.avatar + "\" alt=\"avatar\">\n            </div>\n            <div class=\"comment__body\">\n                <div class=\"comment__meta\">\n                    <span class=\"comment__author\">\n                        " + comment.author.name + "\n                    </span>\n                    <span class=\"comment__date\">\n                        <i class=\"fa fa-clock-o\" aria-hidden=\"true\"></i>\n                        <span>" + comment.created_at.match(dataRegExp)[0] + "</span> at \n                        <span>" + comment.created_at.match(timeRegExp)[0] + "</span>\n                    </span>\n                </div>\n                <div class=\"comment__text\">\n                    " + comment.content + "\n                </div>\n                <div class=\"comment__actions\">\n                    <button onclick=\"toggleCommentForm(event); isEditMode();\">\n                        <i class=\"fa fa-pencil-square-o\" aria-hidden=\"true\"></i> Edit\n                    </button>\n                    <button onclick=\"deleteCurrentComment(event, " + comment.id + ")\">\n                        <i class=\"fa fa-times\" aria-hidden=\"true\"></i> Delete\n                    </button>\n                    <button onclick=\"toggleCommentForm(event)\">\n                        <i class=\"fa fa-reply\" aria-hidden=\"true\"></i>Reply\n                    </button>\n                </div>\n                <div class=\"comment__form\">\n                    <div class=\"comment__form-header\">\n                        <span class=\"reply-to\"><i class=\"fa fa-reply\" aria-hidden=\"true\"></i> " + comment.author.name + "</span>\n                        <button class=\"cancel\" onclick=\"toggleCommentForm(event)\">\n                            <i class=\"fa fa-times\" aria-hidden=\"true\"></i> Cancel\n                        </button>\n                    </div>\n                    <form action=\"\">\n                        <textarea placeholder=\"Your Message\" name=\"\" id=\"\" cols=\"30\" rows=\"6\"></textarea>\n                        <input class=\"btn\" type=\"button\" value=\"Send\" onclick=\"formButtonAction(event, " + comment.id + ", 'answer')\">\n                    </form>\n                </div>\n                <div class=\"comment__answers\">";

        comment.children.forEach(function (item) {
            html += "\n                    <div class=\"comment comment_children\">\n                        <div class=\"avatar\">\n                            <img src=\"" + item.author.avatar + "\" alt=\"avatar\">\n                        </div>\n                        <div class=\"comment__body\">\n                            <div class=\"comment__meta\">\n                                <span class=\"comment__author\">\n                                    " + item.author.name + "\n                                </span>\n                                <span class=\"comment__reply-to\">\n                                    <i class=\"fa fa-reply\" aria-hidden=\"true\"></i> " + comment.author.name + "\n                                </span>\n                                <span class=\"comment__date\">\n                                    <i class=\"fa fa-clock-o\" aria-hidden=\"true\"></i>\n                                    <span>" + item.created_at.match(dataRegExp)[0] + "</span> at \n                                    <span>" + item.created_at.match(timeRegExp)[0] + "</span>\n                                </span>\n                            </div>\n                            <div class=\"comment__text\">\n                                " + item.content + "\n                            </div>\n                        </div>\n                    </div>";
        });

        html += "</div>\n            </div>\n        </div>";
    });
    document.getElementById("comment-list").innerHTML += html;
}

function toggleCommentForm(event) {
    isEditModeEnabled = false;
    var target = $(event.target);
    var form = target.parents(".comment__body").find(".comment__form");

    if (!form.hasClass("comment__form_opened")) {
        form.addClass("comment__form_opened");
    } else {
        form.removeClass("comment__form_opened");
    }
}

function sendComment(event, parentID, mode) {
    var target = $(event.target);
    var textarea = target.parent("form").find("textarea");
    var message = textarea.val();
    // var answersContainer = target.parents(".comment__body").find(".comment__answers");

    switch (mode) {
        case 'answer':
            newComment(message, parentID);
            break;
        case 'comment':
            newComment(message);
            textarea.val("");
            break;
    }
    isEditModeEnabled = false;
}

function deleteCurrentComment(event, id) {
    var target = $(event.target);
    var comment = target.parents(".comment");
    comment.remove();

    deleteComment(id);
}

function loadMoreComments(event) {
    var target = $(event.target);

    getCommentsList(5, commentsCount);

    if (commentsCount % 5 > 0) {
        target.parent(".load-more").css("visibility", "hidden");
    }
}

function editCurrentComment(event, id) {
    var target = $(event.target);
    var textarea = target.parent("form").find("textarea");
    var message = textarea.val();
    editComment(id, message);
}

function isEditMode() {
    isEditModeEnabled = true;
}

function formButtonAction(event, id, mode) {
    if (!isEditModeEnabled) {
        sendComment(event, id, mode);
    } else {
        editCurrentComment(event, id);
    }
}

// Polyfill
if (!Array.from) {
    Array.from = function () {
        var toStr = Object.prototype.toString;
        var isCallable = function isCallable(fn) {
            return typeof fn === 'function' || toStr.call(fn) === '[object Function]';
        };
        var toInteger = function toInteger(value) {
            var number = Number(value);
            if (isNaN(number)) {
                return 0;
            }
            if (number === 0 || !isFinite(number)) {
                return number;
            }
            return (number > 0 ? 1 : -1) * Math.floor(Math.abs(number));
        };
        var maxSafeInteger = Math.pow(2, 53) - 1;
        var toLength = function toLength(value) {
            var len = toInteger(value);
            return Math.min(Math.max(len, 0), maxSafeInteger);
        };

        // The length property of the from method is 1.
        return function from(arrayLike /*, mapFn, thisArg */) {
            // 1. Let C be the this value.
            var C = this;

            // 2. Let items be ToObject(arrayLike).
            var items = Object(arrayLike);

            // 3. ReturnIfAbrupt(items).
            if (arrayLike == null) {
                throw new TypeError('Array.from requires an array-like object - not null or undefined');
            }

            // 4. If mapfn is undefined, then let mapping be false.
            var mapFn = arguments.length > 1 ? arguments[1] : void undefined;
            var T;
            if (typeof mapFn !== 'undefined') {
                // 5. else
                // 5. a If IsCallable(mapfn) is false, throw a TypeError exception.
                if (!isCallable(mapFn)) {
                    throw new TypeError('Array.from: when provided, the second argument must be a function');
                }

                // 5. b. If thisArg was supplied, let T be thisArg; else let T be undefined.
                if (arguments.length > 2) {
                    T = arguments[2];
                }
            }

            // 10. Let lenValue be Get(items, "length").
            // 11. Let len be ToLength(lenValue).
            var len = toLength(items.length);

            // 13. If IsConstructor(C) is true, then
            // 13. a. Let A be the result of calling the [[Construct]] internal method 
            // of C with an argument list containing the single item len.
            // 14. a. Else, Let A be ArrayCreate(len).
            var A = isCallable(C) ? Object(new C(len)) : new Array(len);

            // 16. Let k be 0.
            var k = 0;
            // 17. Repeat, while k < len… (also steps a - h)
            var kValue;
            while (k < len) {
                kValue = items[k];
                if (mapFn) {
                    A[k] = typeof T === 'undefined' ? mapFn(kValue, k) : mapFn.call(T, kValue, k);
                } else {
                    A[k] = kValue;
                }
                k += 1;
            }
            // 18. Let putStatus be Put(A, "length", len, true).
            A.length = len;
            // 20. Return A.
            return A;
        };
    }();
}